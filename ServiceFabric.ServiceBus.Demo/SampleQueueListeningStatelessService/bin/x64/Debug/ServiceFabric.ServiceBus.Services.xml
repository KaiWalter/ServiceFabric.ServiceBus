<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceFabric.ServiceBus.Services</name>
    </assembly>
    <members>
        <member name="T:ServiceFabric.ServiceBus.Services.AutoCompleteServiceBusMessageReceiver">
            <summary>
            Implementation of <see cref="T:ServiceFabric.ServiceBus.Services.IServiceBusMessageReceiver"/> that will automatically call <see cref="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete"/>
            on the received message after successfull processing.
            Upon failure, it will call <see cref="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon"/>.
            Also has cancellation support.
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.AutoCompleteServiceBusMessageReceiver.ReceiveMessage(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.CancellationToken)">
            <summary>
            Processes a message. Must perform error handling and also message completion or abandoning.
            </summary>
            <param name="message">The incoming Service Bus Message to process</param>
            <param name="cancellationToken">When Set, indicates that processing should stop.</param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.AutoCompleteServiceBusMessageReceiver.ReceiveMessage(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
            <summary>
            Processes a message. Must perform error handling and also message completion or abandoning.
            </summary>
            <param name="message">The incoming Service Bus Message to process</param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.AutoCompleteServiceBusMessageReceiver.ReceiveMessageImpl(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.CancellationToken)">
            <summary>
            (When overridden) Processes a message.
            </summary>
            <param name="message">The incoming Service Bus Message to process</param>
            <param name="cancellationToken">When Set, indicates that processing should stop.</param>
        </member>
        <member name="T:ServiceFabric.ServiceBus.Services.IServiceBusMessageReceiver">
            <summary>
            Marks a class as capable of receiving <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage"/>s.
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.IServiceBusMessageReceiver.ReceiveMessage(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
            <summary>
            Processes a message. Must perform error handling and also message completion or abandoning.
            </summary>
            <param name="message">The incoming Service Bus Message to process</param>
        </member>
        <member name="T:ServiceFabric.ServiceBus.Services.ICancelableServiceBusMessageReceiver">
            <summary>
            Marks a class as capable of receiving <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage"/>s, with added cancellation support. (To keep backwards compatibility)
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.ICancelableServiceBusMessageReceiver.ReceiveMessage(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.CancellationToken)">
            <summary>
            Processes a message. Must perform error handling and also message completion or abandoning.
            </summary>
            <param name="message">The incoming Service Bus Message to process</param>
            <param name="cancellationToken">When Set, indicates that processing should stop.</param>
        </member>
        <member name="T:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener">
            <summary>
            Abstract base implementation for <see cref="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener"/> connected to ServiceBus
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Receiver">
            <summary>
            Gets the processor of incoming messages
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Context">
            <summary>
            Gets the <see cref="T:System.Fabric.ServiceContext"/> that was used to create this instance.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ServiceBusReceiveConnectionString">
            <summary>
            Gets a Service Bus connection string that should have only receive-rights.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ServiceBusSendConnectionString">
            <summary>
            Gets a Service Bus connection string that should have only send-rights.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.StopProcessingMessageToken">
            <summary>
            When <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/> is true, this indicates that either <see cref="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.CloseAsync(System.Threading.CancellationToken)"/> 
            or <see cref="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Abort"/> was called.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ServiceBusMessageBatchSize">
            <summary>
            Gets or sets the batch size when receiving Service Bus Messages. (Defaults to 10)
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ServiceBusMessagePrefetchCount">
            <summary>
            Gets or sets the prefetch size when receiving Service Bus Messages. (Defaults to 0, which indicates no prefetch)
            Set to 20 times the total number of messages that a single receiver can process per second.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ServiceBusServerTimeout">
            <summary>
            Gets or sets the timeout for receiving a batch of Service Bus Messages. (Defaults to 30s)
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ServiceBusReceiveMode">
            <summary>
            Gets or sets the Service Bus client ReceiveMode. 
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.#ctor(ServiceFabric.ServiceBus.Services.IServiceBusMessageReceiver,System.Fabric.ServiceContext,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="receiver">(Required) Processes incoming messages.</param>
            <param name="context">(Optional) The context that was used to init the Reliable Service that uses this listener.</param>
            <param name="serviceBusSendConnectionString">(Optional) A Service Bus connection string that can be used for Sending messages. 
            (Returned as Service Endpoint.) When not supplied, an App.config appSettings value with key 'Microsoft.ServiceBus.ConnectionString.Receive'
             is used.</param>
            <param name="serviceBusReceiveConnectionString">(Optional) A Service Bus connection string that can be used for Receiving messages. 
             When not supplied, an App.config appSettings value with key 'Microsoft.ServiceBus.ConnectionString.Receive'
             is used.</param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
                        completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
                        the endpoint string.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
                        this method allows the communication listener to transition to this state in a
                        graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
                        this method causes the transition to close ungracefully. Any outstanding operations
                        (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.CloseImplAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
                        this method allows the communication listener to transition to this state in a
                        graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.StartBackgroundThread(System.Threading.ThreadStart)">
            <summary>
            Executes the provided <paramref name="action"/> on a background thread.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.ReceiveMessage(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
            <summary>
            Will pass an incoming message to the <see cref="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Receiver"/> for processing.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusCommunicationListener.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusQueueCommunicationListener">
            <summary>
            Implementation of <see cref="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener"/> that listens to a Service Bus Queue.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusQueueCommunicationListener.ServiceBusQueueName">
            <summary>
            Gets the name of the monitored Service Bus Queue.
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusQueueCommunicationListener.#ctor(ServiceFabric.ServiceBus.Services.IServiceBusMessageReceiver,System.Fabric.ServiceContext,System.String,System.String,System.String)">
            <summary>
            Creates a new instance, using the init parameters of a <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulService"/>
            </summary>
            <param name="receiver">(Required) Processes incoming messages.</param>
            <param name="context">(Optional) The context that was used to init the Reliable Service that uses this listener.</param>
            <param name="serviceBusQueueName">The name of the monitored Service Bus Queue</param>
            <param name="serviceBusSendConnectionString">(Optional) A Service Bus connection string that can be used for Sending messages. 
            (Returned as Service Endpoint.) When not supplied, an App.config appSettings value with key 'Microsoft.ServiceBus.ConnectionString.Receive'
             is used.</param>
            <param name="serviceBusReceiveConnectionString">(Optional) A Service Bus connection string that can be used for Receiving messages. 
             When not supplied, an App.config appSettings value with key 'Microsoft.ServiceBus.ConnectionString.Receive'
             is used.</param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusQueueCommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
                        completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
                        the endpoint string.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusQueueCommunicationListener.CloseImplAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
                        this method allows the communication listener to transition to this state in a
                        graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusQueueCommunicationListener.ListenForMessages">
            <summary>
            Starts listening for messages on the configured Service Bus Queue.
            </summary>
        </member>
        <member name="T:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener">
            <summary>
            Implementation of <see cref="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener"/> that listens to a Service Bus SubscriptionS.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener.ServiceBusTopicName">
            <summary>
            Gets the name of the monitored Service Bus Topic.
            </summary>
        </member>
        <member name="P:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener.ServiceBusSubscriptionName">
            <summary>
            Gets the name of the monitored Service Bus Topic Subscription.
            </summary>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener.#ctor(ServiceFabric.ServiceBus.Services.IServiceBusMessageReceiver,System.Fabric.ServiceContext,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance, using the init parameters of a <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulService"/>
            </summary>
            <param name="receiver">(Required) Processes incoming messages.</param>
            <param name="context">(Optional) The context that was used to init the Reliable Service that uses this listener.</param>
            <param name="serviceBusTopicName">The name of the monitored Service Bus Topic</param>
            <param name="serviceBusSubscriptionName">The name of the monitored Service Bus Topic Subscription</param>
            <param name="serviceBusSendConnectionString">(Optional) A Service Bus connection string that can be used for Sending messages. 
            (Returned as Service Endpoint.) When not supplied, an App.config appSettings value with key 'Microsoft.ServiceBus.ConnectionString.Receive'
             is used.</param>
            <param name="serviceBusReceiveConnectionString">(Optional) A Service Bus connection string that can be used for Receiving messages. 
             When not supplied, an App.config appSettings value with key 'Microsoft.ServiceBus.ConnectionString.Receive'
             is used.</param>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
                        completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
                        the endpoint string.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener.CloseImplAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
                        this method allows the communication listener to transition to this state in a
                        graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:ServiceFabric.ServiceBus.Services.CommunicationListeners.ServiceBusSubscriptionCommunicationListener.ListenForMessages">
            <summary>
            Starts listening for messages on the configured Service Bus Subscription.
            </summary>
        </member>
    </members>
</doc>
